datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

enum provider {
  EMAIL
  GOOGLE
  GITHUB
}

model user {
  id                   String    @id @default(uuid())
  username             String    @unique
  email                String    @unique
  provider             provider
  encrypted_password   String?
  bio                  String?
  avatar_url           String?
  recovery_sent_at     DateTime? @db.Timestamptz
  recovery_token       String?
  last_sign_in_at      DateTime? @db.Timestamptz
  confirmation_sent_at DateTime? @db.Timestamptz
  confirmation_token   String?
  confirmed_at         DateTime? @db.Timestamptz
  refresh_token        String?
  created_at           DateTime  @default(now()) @db.Timestamptz
  updated_at           DateTime  @updatedAt @db.Timestamptz
  rooms                room[]
  rooms_created        room[]    @relation("roomCreator")
  votes                vote[]
}

model room {
  id         String   @id @default(uuid())
  name       String   @unique
  creator    user     @relation("roomCreator", fields: [creator_id], references: [id])
  creator_id String
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  users      user[]
  polls      poll[]
}

model poll {
  id         String   @id @default(uuid())
  question   String
  room       room     @relation(fields: [room_id], references: [id])
  room_id    String
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  options    option[]
}

model option {
  id          String   @id @default(uuid())
  option_text String
  poll        poll     @relation(fields: [poll_id], references: [id])
  poll_id     String
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @updatedAt @db.Timestamptz
  votes       vote[]
}

model vote {
  id         String   @id @default(uuid())
  option     option   @relation(fields: [option_id], references: [id])
  option_id  String
  user       user     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
}
